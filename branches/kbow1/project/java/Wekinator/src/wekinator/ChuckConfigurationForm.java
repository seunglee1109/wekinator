/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ChuckConfigurationForm.java
 *
 * Created on Nov 13, 2009, 4:01:42 PM
 */
package wekinator;

import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import wekinator.ChuckRunner.ChuckRunnerState;
import wekinator.util.OverwritePromptingFileChooser;
import wekinator.util.Util;

/**
 *
 * @author rebecca
 */
public class ChuckConfigurationForm extends javax.swing.JFrame {

    ChuckConfiguration configuration;
    ChuckConfiguration initialConfiguration;
    String homePath = ".." + File.separator + ".." + File.separator; //TODO: get from settings

    /** Creates new form ChuckConfigurationForm */
    public ChuckConfigurationForm(ChuckConfiguration c) {
        configuration = c;
        initialConfiguration = new ChuckConfiguration(configuration);
        initComponents();

        panelOscFeatureExtractor.setVisible(!WekinatorRunner.isPlork());
        panelBlotar.setVisible(WekinatorRunner.isPlork());
        //panelPlayalong.setVisible(!WekinatorRunner.isPlork());

        //panelFeatures.repaint();
        repaint();
        updateAllComponents();
    }

    /* public ChuckConfigurationForm(File configurationFile) throws FileNotFoundException, IOException, ClassNotFoundException {
    configuration = ChuckConfiguration.loadFromFile(configurationFile);
    initialConfiguration = new ChuckConfiguration(configuration);
    initComponents();
    updateAllComponents();
    } */
    public void setHomePath(String s) {
        homePath = s;
    }

    private void enableDiscreteSynthStuff(boolean b) {
        labelSynthMaxParamVals.setEnabled(b);
        labelSynthExpects.setEnabled(b);
        textSynthMaxParamVals.setEnabled(b);
        comboUseDist.setEnabled(b);
    }

    private File findExportChuckFile() {
        String preferredLoc = configuration.getChuckDir();
        File tmp = new File(preferredLoc);
        if (!tmp.exists()) {
            preferredLoc = homePath;
        }

        JFileChooser fc = new OverwritePromptingFileChooser();

        fc.setSelectedFile(new File(configuration.getChuckDir() + "/main_machine_add_files/config.ck"));
        fc.setDialogType(JFileChooser.SAVE_DIALOG);
        fc.setFileSelectionMode(JFileChooser.FILES_ONLY);

        int returnVal = fc.showSaveDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            return fc.getSelectedFile();
        }
        return null;

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel3 = new javax.swing.JPanel();
        buttonLoadConfiguration = new javax.swing.JButton();
        buttonSaveConfiguration = new javax.swing.JButton();
        buttonOK = new javax.swing.JButton();
        buttonCancel = new javax.swing.JButton();
        buttonSaveConfiguration1 = new javax.swing.JButton();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        panelFeatures = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        labelCustomFeatureExtractor = new javax.swing.JLabel();
        buttonChooseChuckFeatureExtractor = new javax.swing.JButton();
        checkEnableCustomChuckFeature = new javax.swing.JCheckBox();
        textNumCustomFeatures = new javax.swing.JFormattedTextField();
        jLabel5 = new javax.swing.JLabel();
        helpFeatures = new javax.swing.JButton();
        panelOscFeatureExtractor = new javax.swing.JPanel();
        checkEnableOSCFeature = new javax.swing.JCheckBox();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        textNumOscFeatures = new javax.swing.JFormattedTextField();
        panelSynth = new javax.swing.JPanel();
        radioUseChuckSynth = new javax.swing.JRadioButton();
        labelSynthClass = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        buttonChooseChuckSynth = new javax.swing.JButton();
        helpSynth = new javax.swing.JButton();
        panelBlotar = new javax.swing.JPanel();
        radioUseBlotar = new javax.swing.JRadioButton();
        radioUseOSCSynth = new javax.swing.JRadioButton();
        jLabel10 = new javax.swing.JLabel();
        textSynthNumParams = new javax.swing.JFormattedTextField();
        comboRealInteger = new javax.swing.JComboBox();
        jLabel11 = new javax.swing.JLabel();
        labelSynthMaxParamVals = new javax.swing.JLabel();
        textSynthMaxParamVals = new javax.swing.JFormattedTextField();
        labelSynthExpects = new javax.swing.JLabel();
        comboUseDist = new javax.swing.JComboBox();
        panelSetup = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        buttonChangeChuckExecutable = new javax.swing.JButton();
        labelChuckExecutable = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        buttonChangeCoreChuckLocation = new javax.swing.JButton();
        labelCoreChuckDirectory = new javax.swing.JLabel();
        helpCoreChuck = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        panelPlayalong = new javax.swing.JPanel();
        helpPlayalong = new javax.swing.JButton();
        checkEnablePlayalong = new javax.swing.JCheckBox();
        buttonChoosePlayalongFile = new javax.swing.JButton();
        labelScorePlayer = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jScrollPane1.setPreferredSize(new java.awt.Dimension(620, 390));

        jPanel3.setPreferredSize(new java.awt.Dimension(635, 390));
        jPanel3.setRequestFocusEnabled(false);

        buttonLoadConfiguration.setText("Load configuration...");
        buttonLoadConfiguration.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonLoadConfigurationActionPerformed(evt);
            }
        });

        buttonSaveConfiguration.setText("Save configuration...");
        buttonSaveConfiguration.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSaveConfigurationActionPerformed(evt);
            }
        });

        buttonOK.setText("OK");
        buttonOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonOKActionPerformed(evt);
            }
        });

        buttonCancel.setText("Cancel");
        buttonCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCancelActionPerformed(evt);
            }
        });

        buttonSaveConfiguration1.setFont(new java.awt.Font("Lucida Grande", 2, 13));
        buttonSaveConfiguration1.setText("Export as .ck file...");
        buttonSaveConfiguration1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSaveConfiguration1ActionPerformed(evt);
            }
        });

        jLabel1.setText("CustomFeatureExtractor file:");

        labelCustomFeatureExtractor.setText("/user/rebecca/stuff/core_chuck/");

        buttonChooseChuckFeatureExtractor.setText("Choose file");
        buttonChooseChuckFeatureExtractor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonChooseChuckFeatureExtractorActionPerformed(evt);
            }
        });

        checkEnableCustomChuckFeature.setText("Enable a custom ChucK feature extractor");
        checkEnableCustomChuckFeature.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkEnableCustomChuckFeatureActionPerformed(evt);
            }
        });

        textNumCustomFeatures.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        textNumCustomFeatures.setText("0");
        textNumCustomFeatures.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textNumCustomFeaturesActionPerformed(evt);
            }
        });
        textNumCustomFeatures.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                textNumCustomFeaturesPropertyChange(evt);
            }
        });

        jLabel5.setText("features extracted");

        helpFeatures.setIcon(new javax.swing.ImageIcon(getClass().getResource("/wekinator/info.png"))); // NOI18N

        checkEnableOSCFeature.setText("Enable an OSC feature extractor (e.g., Max/MSP) (launch manually)");
        checkEnableOSCFeature.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkEnableOSCFeatureActionPerformed(evt);
            }
        });

        jLabel7.setText("features extracted");

        jLabel8.setFont(new java.awt.Font("Lucida Grande", 2, 13));
        jLabel8.setText("Ensure your extractor is sending these to port 6453");

        textNumOscFeatures.setText("0");
        textNumOscFeatures.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textNumOscFeaturesActionPerformed(evt);
            }
        });
        textNumOscFeatures.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                textNumOscFeaturesPropertyChange(evt);
            }
        });

        org.jdesktop.layout.GroupLayout panelOscFeatureExtractorLayout = new org.jdesktop.layout.GroupLayout(panelOscFeatureExtractor);
        panelOscFeatureExtractor.setLayout(panelOscFeatureExtractorLayout);
        panelOscFeatureExtractorLayout.setHorizontalGroup(
            panelOscFeatureExtractorLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(panelOscFeatureExtractorLayout.createSequentialGroup()
                .add(panelOscFeatureExtractorLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(panelOscFeatureExtractorLayout.createSequentialGroup()
                        .add(33, 33, 33)
                        .add(textNumOscFeatures, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 63, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jLabel7)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jLabel8))
                    .add(checkEnableOSCFeature))
                .addContainerGap(50, Short.MAX_VALUE))
        );
        panelOscFeatureExtractorLayout.setVerticalGroup(
            panelOscFeatureExtractorLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(panelOscFeatureExtractorLayout.createSequentialGroup()
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(checkEnableOSCFeature)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(panelOscFeatureExtractorLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(textNumOscFeatures, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel7)
                    .add(jLabel8)))
        );

        org.jdesktop.layout.GroupLayout panelFeaturesLayout = new org.jdesktop.layout.GroupLayout(panelFeatures);
        panelFeatures.setLayout(panelFeaturesLayout);
        panelFeaturesLayout.setHorizontalGroup(
            panelFeaturesLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(panelFeaturesLayout.createSequentialGroup()
                .add(panelFeaturesLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(panelFeaturesLayout.createSequentialGroup()
                        .addContainerGap()
                        .add(panelOscFeatureExtractor, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, panelFeaturesLayout.createSequentialGroup()
                        .addContainerGap()
                        .add(panelFeaturesLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(checkEnableCustomChuckFeature)
                            .add(panelFeaturesLayout.createSequentialGroup()
                                .add(29, 29, 29)
                                .add(panelFeaturesLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(panelFeaturesLayout.createSequentialGroup()
                                        .add(textNumCustomFeatures, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 63, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                        .add(jLabel5))
                                    .add(jLabel1))))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(buttonChooseChuckFeatureExtractor)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 156, Short.MAX_VALUE)
                        .add(helpFeatures))
                    .add(panelFeaturesLayout.createSequentialGroup()
                        .add(52, 52, 52)
                        .add(labelCustomFeatureExtractor, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 551, Short.MAX_VALUE)))
                .addContainerGap())
        );
        panelFeaturesLayout.setVerticalGroup(
            panelFeaturesLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(panelFeaturesLayout.createSequentialGroup()
                .add(panelFeaturesLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(panelFeaturesLayout.createSequentialGroup()
                        .add(panelFeaturesLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(checkEnableCustomChuckFeature)
                            .add(buttonChooseChuckFeatureExtractor))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jLabel1))
                    .add(helpFeatures))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(labelCustomFeatureExtractor, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 16, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(panelFeaturesLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(textNumCustomFeatures, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel5))
                .add(4, 4, 4)
                .add(panelOscFeatureExtractor, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("Features (input)", panelFeatures);

        buttonGroup1.add(radioUseChuckSynth);
        radioUseChuckSynth.setText("Use a ChucK synth class");

        labelSynthClass.setText("/user/rebecca/stuff/core_chuck/");

        jLabel9.setText("Location of SynthClass file:");

        buttonChooseChuckSynth.setText("Choose file");
        buttonChooseChuckSynth.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonChooseChuckSynthActionPerformed(evt);
            }
        });

        helpSynth.setIcon(new javax.swing.ImageIcon(getClass().getResource("/wekinator/info.png"))); // NOI18N

        buttonGroup1.add(radioUseBlotar);
        radioUseBlotar.setText("Use Max/MSP blotar (you'll have to launch the blotar patch yourself)");

        org.jdesktop.layout.GroupLayout panelBlotarLayout = new org.jdesktop.layout.GroupLayout(panelBlotar);
        panelBlotar.setLayout(panelBlotarLayout);
        panelBlotarLayout.setHorizontalGroup(
            panelBlotarLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(radioUseBlotar)
        );
        panelBlotarLayout.setVerticalGroup(
            panelBlotarLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(radioUseBlotar, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 29, Short.MAX_VALUE)
        );

        buttonGroup1.add(radioUseOSCSynth);
        radioUseOSCSynth.setText("Use a different Max/OSC synth module (launch manually)");
        radioUseOSCSynth.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioUseOSCSynthActionPerformed(evt);
            }
        });

        jLabel10.setText("My synth takes");

        textSynthNumParams.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        textSynthNumParams.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textSynthNumParamsActionPerformed(evt);
            }
        });
        textSynthNumParams.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                textSynthNumParamsPropertyChange(evt);
            }
        });

        comboRealInteger.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Real-valued", "Integer-valued" }));
        comboRealInteger.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboRealIntegerActionPerformed(evt);
            }
        });

        jLabel11.setText("parameters");

        labelSynthMaxParamVals.setText("Its max # values per parameter is ");
        labelSynthMaxParamVals.setEnabled(false);

        textSynthMaxParamVals.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        textSynthMaxParamVals.setText("0");
        textSynthMaxParamVals.setEnabled(false);
        textSynthMaxParamVals.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textSynthMaxParamValsActionPerformed(evt);
            }
        });
        textSynthMaxParamVals.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                textSynthMaxParamValsPropertyChange(evt);
            }
        });

        labelSynthExpects.setText("My synth expects");
        labelSynthExpects.setEnabled(false);

        comboUseDist.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "just the parameters, please", "a probability distribution over all parameter values" }));
        comboUseDist.setEnabled(false);

        org.jdesktop.layout.GroupLayout panelSynthLayout = new org.jdesktop.layout.GroupLayout(panelSynth);
        panelSynth.setLayout(panelSynthLayout);
        panelSynthLayout.setHorizontalGroup(
            panelSynthLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(panelSynthLayout.createSequentialGroup()
                .add(panelSynthLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(panelSynthLayout.createSequentialGroup()
                        .addContainerGap()
                        .add(panelSynthLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(panelSynthLayout.createSequentialGroup()
                                .add(radioUseChuckSynth)
                                .add(8, 8, 8)
                                .add(buttonChooseChuckSynth)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 180, Short.MAX_VALUE)
                                .add(helpSynth))
                            .add(panelSynthLayout.createSequentialGroup()
                                .add(27, 27, 27)
                                .add(jLabel9))))
                    .add(panelSynthLayout.createSequentialGroup()
                        .add(51, 51, 51)
                        .add(labelSynthClass))
                    .add(panelSynthLayout.createSequentialGroup()
                        .addContainerGap()
                        .add(panelSynthLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(panelSynthLayout.createSequentialGroup()
                                .add(29, 29, 29)
                                .add(panelSynthLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(panelSynthLayout.createSequentialGroup()
                                        .add(labelSynthMaxParamVals)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                        .add(textSynthMaxParamVals, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 63, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                    .add(panelSynthLayout.createSequentialGroup()
                                        .add(jLabel10)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                        .add(textSynthNumParams, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 63, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                        .add(comboRealInteger, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                        .add(8, 8, 8)
                                        .add(jLabel11))
                                    .add(panelSynthLayout.createSequentialGroup()
                                        .add(labelSynthExpects)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                        .add(comboUseDist, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
                            .add(radioUseOSCSynth)))
                    .add(panelSynthLayout.createSequentialGroup()
                        .addContainerGap()
                        .add(panelBlotar, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panelSynthLayout.setVerticalGroup(
            panelSynthLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(panelSynthLayout.createSequentialGroup()
                .add(panelSynthLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(panelSynthLayout.createSequentialGroup()
                        .add(panelSynthLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(buttonChooseChuckSynth)
                            .add(radioUseChuckSynth))
                        .add(3, 3, 3)
                        .add(jLabel9)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(labelSynthClass)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(panelBlotar, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(radioUseOSCSynth))
                    .add(helpSynth))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(panelSynthLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(panelSynthLayout.createSequentialGroup()
                        .add(28, 28, 28)
                        .add(textSynthMaxParamVals, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(panelSynthLayout.createSequentialGroup()
                        .add(panelSynthLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jLabel10)
                            .add(textSynthNumParams, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(comboRealInteger, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jLabel11))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(labelSynthMaxParamVals)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(panelSynthLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(labelSynthExpects)
                            .add(comboUseDist, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("Synthesis (output)", panelSynth);

        jLabel3.setText("Location of chuck executable");

        buttonChangeChuckExecutable.setText("Choose file");
        buttonChangeChuckExecutable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonChangeChuckExecutableActionPerformed(evt);
            }
        });

        labelChuckExecutable.setText("/Users/rebecca/PLOrk/bin/chuck");

        jLabel2.setText("Location of wekinator project directory:");

        buttonChangeCoreChuckLocation.setText("Choose directory");
        buttonChangeCoreChuckLocation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonChangeCoreChuckLocationActionPerformed(evt);
            }
        });

        labelCoreChuckDirectory.setText("/Users/rebecca/PLOrk/wekinator/project/");

        helpCoreChuck.setIcon(new javax.swing.ImageIcon(getClass().getResource("/wekinator/info.png"))); // NOI18N

        jLabel4.setFont(new java.awt.Font("Lucida Grande", 2, 13));
        jLabel4.setText("This should be [something]/PLOrk/bin/chuck or /usr/bin/chuck");

        jLabel6.setFont(new java.awt.Font("Lucida Grande", 2, 13));
        jLabel6.setText("This should be [something]/wekinator/project or [something]/PLOrk/wekinator/project");

        org.jdesktop.layout.GroupLayout panelSetupLayout = new org.jdesktop.layout.GroupLayout(panelSetup);
        panelSetup.setLayout(panelSetupLayout);
        panelSetupLayout.setHorizontalGroup(
            panelSetupLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(panelSetupLayout.createSequentialGroup()
                .addContainerGap()
                .add(panelSetupLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(panelSetupLayout.createSequentialGroup()
                        .add(jLabel3)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(buttonChangeChuckExecutable))
                    .add(panelSetupLayout.createSequentialGroup()
                        .add(6, 6, 6)
                        .add(jLabel4))
                    .add(panelSetupLayout.createSequentialGroup()
                        .add(24, 24, 24)
                        .add(labelChuckExecutable))
                    .add(panelSetupLayout.createSequentialGroup()
                        .add(jLabel2)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(buttonChangeCoreChuckLocation))
                    .add(panelSetupLayout.createSequentialGroup()
                        .add(24, 24, 24)
                        .add(labelCoreChuckDirectory)))
                .addContainerGap(158, Short.MAX_VALUE))
            .add(panelSetupLayout.createSequentialGroup()
                .add(20, 20, 20)
                .add(jLabel6)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .add(org.jdesktop.layout.GroupLayout.TRAILING, panelSetupLayout.createSequentialGroup()
                .addContainerGap(546, Short.MAX_VALUE)
                .add(helpCoreChuck))
        );
        panelSetupLayout.setVerticalGroup(
            panelSetupLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(panelSetupLayout.createSequentialGroup()
                .add(panelSetupLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(panelSetupLayout.createSequentialGroup()
                        .add(panelSetupLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jLabel3)
                            .add(buttonChangeChuckExecutable))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jLabel4)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(labelChuckExecutable)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(panelSetupLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jLabel2)
                            .add(buttonChangeCoreChuckLocation))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jLabel6)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(labelCoreChuckDirectory))
                    .add(helpCoreChuck))
                .addContainerGap(63, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("System", panelSetup);

        helpPlayalong.setIcon(new javax.swing.ImageIcon(getClass().getResource("/wekinator/info.png"))); // NOI18N

        checkEnablePlayalong.setText("Enable play-along ChucK score");
        checkEnablePlayalong.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkEnablePlayalongActionPerformed(evt);
            }
        });

        buttonChoosePlayalongFile.setText("Choose file");
        buttonChoosePlayalongFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonChoosePlayalongFileActionPerformed(evt);
            }
        });

        labelScorePlayer.setText("/user/rebecca/stuff/core_chuck/");

        jLabel15.setText("Location of ScorePlayer file:");

        jLabel16.setFont(new java.awt.Font("Lucida Grande", 2, 13)); // NOI18N
        jLabel16.setText("You can use a playalong ChucK score in addition to playing the parameter clipboard.");

        org.jdesktop.layout.GroupLayout panelPlayalongLayout = new org.jdesktop.layout.GroupLayout(panelPlayalong);
        panelPlayalong.setLayout(panelPlayalongLayout);
        panelPlayalongLayout.setHorizontalGroup(
            panelPlayalongLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(panelPlayalongLayout.createSequentialGroup()
                .add(panelPlayalongLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(panelPlayalongLayout.createSequentialGroup()
                        .add(panelPlayalongLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(panelPlayalongLayout.createSequentialGroup()
                                .add(checkEnablePlayalong)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(buttonChoosePlayalongFile))
                            .add(panelPlayalongLayout.createSequentialGroup()
                                .addContainerGap()
                                .add(jLabel16)))
                        .add(34, 34, 34)
                        .add(helpPlayalong))
                    .add(panelPlayalongLayout.createSequentialGroup()
                        .add(29, 29, 29)
                        .add(jLabel15))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, panelPlayalongLayout.createSequentialGroup()
                        .add(35, 35, 35)
                        .add(labelScorePlayer, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 568, Short.MAX_VALUE)))
                .addContainerGap())
        );
        panelPlayalongLayout.setVerticalGroup(
            panelPlayalongLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(panelPlayalongLayout.createSequentialGroup()
                .add(panelPlayalongLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(panelPlayalongLayout.createSequentialGroup()
                        .addContainerGap()
                        .add(jLabel16)
                        .add(1, 1, 1)
                        .add(panelPlayalongLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(checkEnablePlayalong)
                            .add(buttonChoosePlayalongFile)))
                    .add(helpPlayalong))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jLabel15)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(labelScorePlayer)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("Playalong", panelPlayalong);

        org.jdesktop.layout.GroupLayout jPanel3Layout = new org.jdesktop.layout.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jTabbedPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 630, Short.MAX_VALUE)
                    .add(jPanel3Layout.createSequentialGroup()
                        .add(buttonLoadConfiguration)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(buttonSaveConfiguration)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(buttonSaveConfiguration1)
                        .addContainerGap(96, Short.MAX_VALUE))
                    .add(jPanel3Layout.createSequentialGroup()
                        .add(buttonCancel)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(buttonOK)
                        .addContainerGap(463, Short.MAX_VALUE))))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .add(jTabbedPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 267, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(buttonLoadConfiguration)
                    .add(buttonSaveConfiguration)
                    .add(buttonSaveConfiguration1))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(buttonCancel)
                    .add(buttonOK))
                .addContainerGap(57, Short.MAX_VALUE))
        );

        jScrollPane1.setViewportView(jPanel3);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 640, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 404, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void setConfigurationFromForm() {
        //Want chuck dir:
        configuration.setChuckExecutable(labelChuckExecutable.getText());
        configuration.setCustomChuckFeatureExtractorEnabled(checkEnableCustomChuckFeature.getModel().isSelected());
        configuration.setCustomChuckFeatureExtractorFilename(labelCustomFeatureExtractor.getText());

        if (WekinatorRunner.isPlork()) {
            configuration.setNumOSCFeaturesExtracted(0);
            configuration.setOscFeatureExtractorEnabled(false);
        } else {
            configuration.setOscFeatureExtractorEnabled(checkEnableOSCFeature.getModel().isSelected());
            System.out.println("Is osc feat enabled? " + configuration.isOscFeatureExtractorEnabled());
            try {
                int i = Integer.parseInt(textNumOscFeatures.getText());
                configuration.setNumOSCFeaturesExtracted(i);
            } catch (Exception ex) {
                configuration.setNumOSCFeaturesExtracted(0);
                textNumOscFeatures.setText("0");
            }
        }

        try {

            configuration.setNumCustomChuckFeaturesExtracted(Integer.parseInt(textNumCustomFeatures.getText()));
        //    configuration.setOscFeatureExtractorSendPort(Integer.parseInt(textExtractorSendPort.getText()));
        } catch (Exception ex) {
            configuration.setNumCustomChuckFeaturesExtracted(0);
            textNumCustomFeatures.setText("0");
        }

        if (radioUseChuckSynth.getModel().isSelected()) {
            configuration.setUseChuckSynthClass(true);
            configuration.setUseOscSynth(false);
        } else {
            configuration.setUseChuckSynthClass(false);
            configuration.setUseOscSynth(true);
        }

        configuration.setChuckSynthFilename(labelSynthClass.getText());

        if (radioUseBlotar.getModel().isSelected()) {
            configuration.setNumOscSynthParams(9);
            boolean isDiscreteArray[] = new boolean[9];
            for (int i = 0; i < isDiscreteArray.length; i++) {
                isDiscreteArray[i] = false;
            }
            configuration.setIsOscSynthParamDiscrete(isDiscreteArray);
            configuration.setNumOscSynthMaxParamVals(0);

            try {
                configuration.setNumOscSynthMaxParamVals(Integer.parseInt(textSynthMaxParamVals.getText()));
            } catch (Exception ex) {
                configuration.setNumOscSynthMaxParamVals(0);
                textSynthMaxParamVals.setText("0");
            }

            boolean isDist = (false); //blotar only
            System.out.println("isDist ? " + isDist); //TODO: fix in future!

            boolean isDistArray[] = new boolean[configuration.getNumOscSynthParams()];
            for (int i = 0; i < configuration.getNumOscSynthParams(); i++) {
                isDistArray[i] = isDist;
            }
            configuration.setOscUseDistribution(isDistArray);

        } else {
            try {
                configuration.setNumOscSynthParams(Integer.parseInt(textSynthNumParams.getText()));
            } catch (Exception ex) {
                configuration.setNumOscSynthParams(0);
                textSynthNumParams.setText("0");
            }
            boolean isDiscrete = false;
            if (comboRealInteger.getSelectedIndex() == 0) {
                isDiscrete = false;
            } else {
                isDiscrete = true;
            }

            enableDiscreteSynthStuff(isDiscrete);
            boolean isDiscreteArray[] = new boolean[configuration.getNumOscSynthParams()];
            for (int i = 0; i < configuration.getNumOscSynthParams(); i++) {
                isDiscreteArray[i] = isDiscrete;
            }
            configuration.setIsOscSynthParamDiscrete(isDiscreteArray);

            try {
                configuration.setNumOscSynthMaxParamVals(Integer.parseInt(textSynthMaxParamVals.getText()));
            } catch (Exception ex) {
                configuration.setNumOscSynthMaxParamVals(0);
                textSynthMaxParamVals.setText("0");
            }

            boolean isDist = (comboUseDist.getSelectedIndex() == 1);
            System.out.println("isDist ? " + isDist); //TODO: fix in future!

            boolean isDistArray[] = new boolean[configuration.getNumOscSynthParams()];
            for (int i = 0; i < configuration.getNumOscSynthParams(); i++) {
                isDistArray[i] = isDist;
            }
            configuration.setOscUseDistribution(isDistArray);
        }
        
//        configuration.setOscSynthReceivePort(Integer.parseInt(textSynthReceivePort.getText()));
        configuration.setOscSynthReceivePort(12000);
        configuration.setOscSynthSendPort(6448);

      //  if (WekinatorRunner.isPlork()) {
      //      configuration.setIsPlayalongLearningEnabled(false);
      //      configuration.setPlayalongLearningFile("");
      //  } else {
            configuration.setIsPlayalongLearningEnabled(checkEnablePlayalong.getModel().isSelected());
            configuration.setPlayalongLearningFile(labelScorePlayer.getText());
     //   }
    }

    private void textNumCustomFeaturesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textNumCustomFeaturesActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_textNumCustomFeaturesActionPerformed

    private void textNumCustomFeaturesPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_textNumCustomFeaturesPropertyChange
}//GEN-LAST:event_textNumCustomFeaturesPropertyChange

    private void textSynthNumParamsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textSynthNumParamsActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_textSynthNumParamsActionPerformed

    private void textSynthNumParamsPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_textSynthNumParamsPropertyChange
        // TODO add your handling code here:
}//GEN-LAST:event_textSynthNumParamsPropertyChange

    private void buttonLoadConfigurationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonLoadConfigurationActionPerformed
        //Pop up findConfigurationFile dialog box
        //    File file = findConfigurationLoadFile();
        File file = Util.findLoadFile(ChuckConfiguration.getFileExtension(),
                ChuckConfiguration.getFileTypeDescription(),
                ChuckConfiguration.getDefaultLocation(),
                this);
        if (file != null) {
            try {
                //configuration = ChuckConfiguration.loadFromFile(file); //this is where it goes wrong...  TODO
                configuration = ChuckConfiguration.readFromFile(file);
                updateAllComponents();
            } catch (Exception ex) {
                //TODO: handle:
                System.out.println("Could not load from file");
            }
        }
    }//GEN-LAST:event_buttonLoadConfigurationActionPerformed

    private void buttonSaveConfigurationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSaveConfigurationActionPerformed
        setConfigurationFromForm();
        try {
            configuration.validate();
            // File file = findConfigurationSaveFile();
            File file = Util.findSaveFile(ChuckConfiguration.getFileExtension(),
                    ChuckConfiguration.getFileTypeDescription(),
                    ChuckConfiguration.getDefaultLocation(),
                    this);
            if (file != null) {
                try {
                    configuration.writeToFile(file); //TODOTODOTODO: update last path on this.
                    Util.setLastFile(ChuckConfiguration.getFileExtension(), file);
                } catch (Exception ex) {
                    //TODO: handle:
                    System.out.println("Could not save to file");
                }
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Invalid configuration", JOptionPane.ERROR_MESSAGE);

        }
    }//GEN-LAST:event_buttonSaveConfigurationActionPerformed

    private void checkEnableCustomChuckFeatureActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkEnableCustomChuckFeatureActionPerformed
    }//GEN-LAST:event_checkEnableCustomChuckFeatureActionPerformed

    private void buttonOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonOKActionPerformed
        setConfigurationFromForm();
        try {
            configuration.validate();
            if (ChuckRunner.getRunnerState() != ChuckRunnerState.NOT_RUNNING) {
                JOptionPane.showMessageDialog(this, "You will have to restart ChucK on the main screen before your changes take effect.", "Changed configuration while chuck running", JOptionPane.INFORMATION_MESSAGE);
            }
            this.dispose();
        //Valid: Give configuration to parent?
        // Save configuration & note location for next time?

        } catch (Exception ex) {
            //Invalid: Pop up a message box, stay open
            //   JOptionPane msgPane = new JOptionPane(ex.getMessage(), JOptionPane.ERROR_MESSAGE);
            //  msgPane.setVisible(true);
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Invalid configuration", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_buttonOKActionPerformed

    private void buttonCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCancelActionPerformed
        configuration.setEqualTo(initialConfiguration);
        //Close
        this.dispose();
    }//GEN-LAST:event_buttonCancelActionPerformed

    private void buttonChooseChuckFeatureExtractorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonChooseChuckFeatureExtractorActionPerformed
        File f = findChuckFile();
        if (f != null) {
            try {
                labelCustomFeatureExtractor.setText(f.getCanonicalPath());
            } catch (IOException ex) {
                labelCustomFeatureExtractor.setText(f.getAbsolutePath());

            }
        }
    }//GEN-LAST:event_buttonChooseChuckFeatureExtractorActionPerformed

    private void buttonChooseChuckSynthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonChooseChuckSynthActionPerformed
        File f = findChuckFile();
        if (f != null) {
            try {
                labelSynthClass.setText(f.getCanonicalPath());
            } catch (IOException ex) {
                labelSynthClass.setText(f.getAbsolutePath());

            }
        }
    }//GEN-LAST:event_buttonChooseChuckSynthActionPerformed

    private void buttonChangeChuckExecutableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonChangeChuckExecutableActionPerformed
        File f = findChuckFile(); //TODO: have to change this to not be find chuck file, but find executable
        if (f != null) {
            try {
                labelChuckExecutable.setText(f.getCanonicalPath());

            } catch (IOException ex) {
                Logger.getLogger(ChuckConfigurationForm.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
}//GEN-LAST:event_buttonChangeChuckExecutableActionPerformed

    private void buttonChangeCoreChuckLocationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonChangeCoreChuckLocationActionPerformed
        File f = findCoreChuckDirectory(); //TODO: have to change this to not be find chuck file, but find executable
        if (f != null) {
            try {
                labelCoreChuckDirectory.setText(f.getCanonicalPath());
                // configuration.setChuckDir(f.getCanonicalPath());
                configuration.setWekDir(f.getCanonicalPath());

            } catch (IOException ex) {
                Logger.getLogger(ChuckConfigurationForm.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
}//GEN-LAST:event_buttonChangeCoreChuckLocationActionPerformed

    private void buttonSaveConfiguration1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSaveConfiguration1ActionPerformed
        setConfigurationFromForm();
        try {
            configuration.validate();
            File file = findExportChuckFile();
            if (file != null) {
                ChuckRunner.exportConfigurationToChuckFile(configuration, file);
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Unable to export to file", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_buttonSaveConfiguration1ActionPerformed

    private void textSynthMaxParamValsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textSynthMaxParamValsActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_textSynthMaxParamValsActionPerformed

    private void textSynthMaxParamValsPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_textSynthMaxParamValsPropertyChange
        // TODO add your handling code here:
}//GEN-LAST:event_textSynthMaxParamValsPropertyChange

    private void comboRealIntegerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboRealIntegerActionPerformed
        if (comboRealInteger.getSelectedIndex() == 0) {
            enableDiscreteSynthStuff(false);
        } else {
            enableDiscreteSynthStuff(true);

        }
    }//GEN-LAST:event_comboRealIntegerActionPerformed

    private void radioUseOSCSynthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioUseOSCSynthActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_radioUseOSCSynthActionPerformed

    private void checkEnableOSCFeatureActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkEnableOSCFeatureActionPerformed
}//GEN-LAST:event_checkEnableOSCFeatureActionPerformed

    private void textNumOscFeaturesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textNumOscFeaturesActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_textNumOscFeaturesActionPerformed

    private void textNumOscFeaturesPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_textNumOscFeaturesPropertyChange
        // TODO add your handling code here:
}//GEN-LAST:event_textNumOscFeaturesPropertyChange

    private void buttonChoosePlayalongFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonChoosePlayalongFileActionPerformed
        File f = findChuckFile();
        if (f != null) {
            try {
                labelScorePlayer.setText(f.getCanonicalPath());
            } catch (IOException ex) {
                labelScorePlayer.setText(f.getAbsolutePath());

            }
        }
}//GEN-LAST:event_buttonChoosePlayalongFileActionPerformed

    private void checkEnablePlayalongActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkEnablePlayalongActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_checkEnablePlayalongActionPerformed

    /*    private File findConfigurationLoadFile() {
    JFileChooser fc = new JFileChooser(homePath);
    fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
    boolean success = true;
    File file = null;
    int returnVal = fc.showOpenDialog(this);
    if (returnVal == JFileChooser.APPROVE_OPTION) {
    file = fc.getSelectedFile();
    }

    String lastFile = WekinatorInstance.getWekinatorInstance().getSettings().getLastLocation(ChuckConfiguration.getFileExtension());
    String defaultDir = null;
    if (lastFile == null) {
    defaultDir = ChuckConfiguration.getDefaultLocation();
    }
    FileChooserWithExtension fc = new FileChooserWithExtension(
    ChuckConfiguration.getFileExtension(),
    ChuckConfiguration.getFileTypeDescription(),
    WekinatorInstance.getWekinatorInstance().getSettings().getLastLocation(ChuckConfiguration.getFileExtension()),
    ChuckConfiguration.getDefaultLocation(),
    false);
    File file = null;
    int returnVal = fc.showOpenDialog(this);
    if (returnVal == JFileChooser.APPROVE_OPTION) {
    file = fc.getSelectedFile();
    }
    return file;
    } */
    private File findChuckFile() {
        //Start looking in chuck dir if possible
        File core_chuck = new File(configuration.getWekDir());
        String preferredPath = homePath;
        if (core_chuck.exists()) {
            preferredPath = core_chuck.getParent();
        }

        JFileChooser fc = new JFileChooser(preferredPath);
        fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
        boolean success = true;
        File file = null;
        int returnVal = fc.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            file = fc.getSelectedFile();
        }
        return file;
    }

    private File findCoreChuckDirectory() {
        //Start looking in chuck dir if possible
        File wekdir = new File(configuration.getWekDir());
        String preferredPath = homePath;
        if (wekdir.exists()) {
            preferredPath = wekdir.getAbsolutePath();
        } else {
            try {
                File f = new File(Util.getCanonicalPath(new File("")));
                preferredPath = f.getParentFile().getParentFile().getParentFile().getParentFile().getAbsolutePath();
            } catch (Exception ex) {
                preferredPath = Util.getCanonicalPath(new File(""));
            }
        }

        JFileChooser fc = new JFileChooser(preferredPath);
        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        boolean success = true;
        File file = null;
        int returnVal = fc.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            file = fc.getSelectedFile();
        }
        return file;
    }

    private File findConfigurationSaveFile() {
        String preferredLoc = configuration.getSaveLocation();
        File tmp = new File(preferredLoc);
        if (!tmp.exists()) {
            preferredLoc = homePath;
        }


        JFileChooser fc = new JFileChooser(preferredLoc);
        fc.setDialogType(JFileChooser.SAVE_DIALOG);
        fc.setFileSelectionMode(JFileChooser.FILES_ONLY);


        int returnVal = fc.showSaveDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            return fc.getSelectedFile();
        }
        return null;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                File f = new File("./");
                ChuckConfiguration c = new ChuckConfiguration();
                new ChuckConfigurationForm(c).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonCancel;
    private javax.swing.JButton buttonChangeChuckExecutable;
    private javax.swing.JButton buttonChangeCoreChuckLocation;
    private javax.swing.JButton buttonChooseChuckFeatureExtractor;
    private javax.swing.JButton buttonChooseChuckSynth;
    private javax.swing.JButton buttonChoosePlayalongFile;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton buttonLoadConfiguration;
    private javax.swing.JButton buttonOK;
    private javax.swing.JButton buttonSaveConfiguration;
    private javax.swing.JButton buttonSaveConfiguration1;
    private javax.swing.JCheckBox checkEnableCustomChuckFeature;
    private javax.swing.JCheckBox checkEnableOSCFeature;
    private javax.swing.JCheckBox checkEnablePlayalong;
    private javax.swing.JComboBox comboRealInteger;
    private javax.swing.JComboBox comboUseDist;
    private javax.swing.JButton helpCoreChuck;
    private javax.swing.JButton helpFeatures;
    private javax.swing.JButton helpPlayalong;
    private javax.swing.JButton helpSynth;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JLabel labelChuckExecutable;
    private javax.swing.JLabel labelCoreChuckDirectory;
    private javax.swing.JLabel labelCustomFeatureExtractor;
    private javax.swing.JLabel labelScorePlayer;
    private javax.swing.JLabel labelSynthClass;
    private javax.swing.JLabel labelSynthExpects;
    private javax.swing.JLabel labelSynthMaxParamVals;
    private javax.swing.JPanel panelBlotar;
    private javax.swing.JPanel panelFeatures;
    private javax.swing.JPanel panelOscFeatureExtractor;
    private javax.swing.JPanel panelPlayalong;
    private javax.swing.JPanel panelSetup;
    private javax.swing.JPanel panelSynth;
    private javax.swing.JRadioButton radioUseBlotar;
    private javax.swing.JRadioButton radioUseChuckSynth;
    private javax.swing.JRadioButton radioUseOSCSynth;
    private javax.swing.JFormattedTextField textNumCustomFeatures;
    private javax.swing.JFormattedTextField textNumOscFeatures;
    private javax.swing.JFormattedTextField textSynthMaxParamVals;
    private javax.swing.JFormattedTextField textSynthNumParams;
    // End of variables declaration//GEN-END:variables

    private void updateAllComponents() {
        labelCoreChuckDirectory.setText(configuration.getWekDir());
        labelChuckExecutable.setText(configuration.getChuckExecutable());
        checkEnableCustomChuckFeature.getModel().setSelected(configuration.isCustomChuckFeatureExtractorEnabled());
        labelCustomFeatureExtractor.setText(configuration.getCustomChuckFeatureExtractorFilename());
        textNumCustomFeatures.setText(Integer.toString(configuration.getNumCustomChuckFeaturesExtracted()));
        //   textExtractorSendPort.setText(Integer.toString(configuration.getOscFeatureExtractorSendPort()));

        //OSC feature: not for plork build
        checkEnableOSCFeature.getModel().setSelected(configuration.isOscFeatureExtractorEnabled());
        textNumOscFeatures.setText(Integer.toString(configuration.getNumOSCFeaturesExtracted()));

        if (configuration.isUseChuckSynthClass()) {
            buttonGroup1.setSelected(radioUseChuckSynth.getModel(), true);
        } else {
            buttonGroup1.setSelected(radioUseOSCSynth.getModel(), true);
        }

        labelSynthClass.setText(configuration.getChuckSynthFilename());

        textSynthNumParams.setText(Integer.toString(configuration.getNumOscSynthParams()));
        boolean[] isParamDiscrete = configuration.getIsOscSynthParamDiscrete();
        if (isParamDiscrete.length > 0 && isParamDiscrete[0]) {
            comboRealInteger.setSelectedIndex(1);
            enableDiscreteSynthStuff(true);
        } else {
            comboRealInteger.setSelectedIndex(0);
            enableDiscreteSynthStuff(false);
        } //TODO TEST!s

        //  textSynthReceivePort.setText(Integer.toString(configuration.getOscSynthReceivePort()));
        //  textSynthSendPort.setText(Integer.toString(configuration.getOscSynthSendPort()));

        checkEnablePlayalong.getModel().setSelected(configuration.isIsPlayalongLearningEnabled());
        labelScorePlayer.setText(configuration.getPlayalongLearningFile());
        textSynthMaxParamVals.setText(Integer.toString(configuration.getNumOscSynthMaxParamVals()));

        boolean[] isUseDist = configuration.getOscUseDistribution();

        if (isUseDist.length > 0 && isUseDist[0]) {
            comboUseDist.setSelectedIndex(1);
        } else {
            comboUseDist.setSelectedIndex(0);
        }
        /* if (configuration.isOscSynthIsDiscrete()) {
        enableDiscreteSynthStuff(true);
        } else {
        enableDiscreteSynthStuff(false);
        } */


        repaint();
    }
}
