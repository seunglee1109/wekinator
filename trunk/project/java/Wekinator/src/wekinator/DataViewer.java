/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * DataViewer.java
 *
 * Created on Oct 24, 2009, 2:38:19 PM
 */
package wekinator;

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JTable;
import javax.swing.table.AbstractTableModel;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.converters.ArffLoader.ArffReader;







/**
 *
 * @author rebecca
 */
public class DataViewer extends javax.swing.JFrame {


    /** Creates new form DataViewer */
    public DataViewer() {
        initComponents();
        populateTable();
    }

    public DataViewer(Instances[] ii, MainGUI gui) {
        initComponents();
        populateTable(ii);
        this.gui = gui;
    }


    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        scrollTable = new javax.swing.JScrollPane();
        buttonDone = new javax.swing.JButton();
        buttonDelete = new javax.swing.JButton();
        buttonAdd = new javax.swing.JButton();
        buttonListen = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        buttonDone.setText("Done");
        buttonDone.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonDoneActionPerformed(evt);
            }
        });

        buttonDelete.setText("Delete selected");
        buttonDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonDeleteActionPerformed(evt);
            }
        });

        buttonAdd.setText("Add row");
        buttonAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAddActionPerformed(evt);
            }
        });

        buttonListen.setText("Listen");
        buttonListen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonListenActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(scrollTable, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 604, Short.MAX_VALUE)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .add(buttonDelete)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(buttonAdd)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(buttonListen)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 209, Short.MAX_VALUE)
                .add(buttonDone))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(scrollTable, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 411, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(buttonDone)
                    .add(buttonDelete)
                    .add(buttonAdd)
                    .add(buttonListen)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buttonDoneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonDoneActionPerformed
    this.dispose();

    }//GEN-LAST:event_buttonDoneActionPerformed

    private void buttonDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonDeleteActionPerformed
        model.deleteRows(table.getSelectedRows());
        table.repaint();
}//GEN-LAST:event_buttonDeleteActionPerformed

    private void buttonAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAddActionPerformed
        model.addRow();
}//GEN-LAST:event_buttonAddActionPerformed

    private void buttonListenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonListenActionPerformed
        if (table.getSelectedRow() == -1)
            return;

    
        int row = table.getSelectedRow();
        float f[] = model.getSelectedParams(row);
        gui.listenToValues(f);
        
}//GEN-LAST:event_buttonListenActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new DataViewer().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonAdd;
    private javax.swing.JButton buttonDelete;
    private javax.swing.JButton buttonDone;
    private javax.swing.JButton buttonListen;
    private javax.swing.JScrollPane scrollTable;
    // End of variables declaration//GEN-END:variables
    private javax.swing.JTable table;
    private DataTableModel model;
    private MainGUI gui;

    private void populateTable() {
        //  table = new JTable(new DataTableModel(2, 3));
        BufferedReader reader = null;
        Instances instances[] = new Instances[2];
        try {
            reader = new BufferedReader(new FileReader("/Users/rebecca/work/weka-3-5-6/data/iris.arff"));
            ArffReader arff = new ArffReader(reader);
            Instances data = arff.getData();
            Instances data2 = new Instances(data);
            data.setClassIndex(data.numAttributes() - 1);
              data2.setClassIndex(data.numAttributes() - 1);
            instances[0] = data;
            instances[1] = data2;
        } catch (IOException ex) {
            Logger.getLogger(DataViewer.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                reader.close();
            } catch (IOException ex) {
                Logger.getLogger(DataViewer.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        model = new DataTableModel(instances);
        table = new JTable(model);
        scrollTable.setViewportView(table);
    }

    private void populateTable(Instances[] ii) {
        model = new DataTableModel(ii);

        table = new JTable(model);
        //If using java 6: could add a default row sorter here.
        scrollTable.setViewportView(table);
    }

}
class DataTableModel extends AbstractTableModel {

    private String[] columnNames;
  //  private Object[][] data;
    int numFeats, numParams;
    Instances instances[];

    public DataTableModel(Instances ii[]) {
        instances = ii;
        //Hack: Assume all instances same length (includes same rows in all)
        if (ii.length == 0) {
            this.numFeats = 0;
            this.numParams = 0;
          //  data = new Object[0][0];
            return;
        }

        numFeats = ii[0].numAttributes() - 1;
        numParams = ii.length;

        setColNames();

      //  setFeatures(ii[0]);
      /*  for (int i = 0; i < ii.length; i++) {
            setParamsAll(i, ii[i].attributeToDoubleArray(ii[i].classIndex()));
        } */


    }

    protected void setColNames() {
        columnNames = new String[numFeats + numParams];
        columnNames[0] = "ID";
        for (int i = 1; i < numFeats; i++) {
            columnNames[i] = "feat" + i;
        }
        for (int i = 0; i < numParams; i++) {
            columnNames[numFeats + i] = "param" + (i + 1);
        }
    }

    public int getColumnCount() {
        return columnNames.length;
    }

    public int getRowCount() {
        if (instances.length > 0) {
            return instances[0].numInstances();
        } else {
            return 0;
        }

    }

    public void addRow() {
        //TODO: set ID appropriately

        //Add last row.
        if (instances.length == 0)
            return;

        int row = instances[0].numInstances();
        Instance newInstance = new Instance(numFeats + 1);
        //enough?
        for (int i= 0; i < instances[0].numAttributes(); i++) {
            newInstance.setValue(i,0.0);
        }


        for (int i = 0; i < instances.length; i++) {
            instances[i].add(newInstance);
        }

        fireTableRowsInserted(row,row);
            
    }

    public String getColumnName(int col) {
        return columnNames[col];
    }

    public Object getValueAt(int row, int col) {
       // return data[row][col];
        if (instances.length == 0) {
            return new Float(0.0);
        }

        if (col < numFeats) {
            return instances[0].instance(row).value(col);
        } else {
            return instances[col - numFeats].instance(row).classValue();
        }

    }

    public Class getColumnClass(int c) {
        return getValueAt(0, c).getClass();
    }

    /*
     * Don't need to implement this method unless your table's
     * editable.
     */
    public boolean isCellEditable(int row, int col) {
        //Note that the data/cell address is constant,
        //no matter where the cell appears onscreen.
        if (col >= 1) {
            return true;
        } else {
            return false;
        }
    }

    /*
     * Don't need to implement this method unless your table's
     * data can change.
     */
    public void setValueAt(Object value, int row, int col) {
        if (col == 0) {
            //shouldn't be editing this: it's an ID
            System.out.println("Error: shouldn't edit htis cell");
            return;
        }

        //TODO: check taht this value is legal!

        if (col < numFeats) {
            //we're editing a feature; must edit in all constituent datasets
            //Edit feat # col-1; row=row
            for (int i = 0; i < instances.length; i++) {
                //Check that it's legal:
                System.out.println("Class is " + value.getClass());
                Double d = (Double)value;

                //Change value:
                instances[i].instance(row).setValue(col, d);

            }


        } else if (col < numFeats + numParams) {
           //editing a class value of just one dataset
            //Check:

            System.out.println("Class is " + value.getClass());
            if (value instanceof Double) {
                Double d = (Double)value;
                instances[col - numFeats].instance(row).setClassValue(d);
            } else if (value instanceof Float) {
                Float f = (Float)value;
                instances[col - numFeats].instance(row).setClassValue(f);
            } else {
                System.out.println("Error class cast " + value.getClass());
            }
          //  Double d = (Double)value;
          //  instances[col - numFeats].instance(0).

            
        }

       // data[row][col] = value;
        fireTableCellUpdated(row, col);
    }

    void deleteRows(int[] selectedRows) {

        //tmp: examine:
        //Assumption is that selectedRows will always be in increasing order
     /*   for (int i = 0; i < selectedRows.length; i++) {
            System.out.println(selectedRows[i]);
        } */

        for (int j = selectedRows.length - 1; j >= 0; j--) {
            for (int i = 0; i < instances.length; i++) {
                //Delete the weka representation
                System.out.println("i = " + i + ", Trying to delete row " + selectedRows[j]
                        + " instances # is " + instances[i].numInstances());
                       
                instances[i].delete(selectedRows[j]);

                //Also delete the table model's row!
                
            }
                System.out.println("Deleting " + selectedRows[j]);
                fireTableRowsDeleted(selectedRows[j], selectedRows[j]);
        }
        
        

    }


    float[] getSelectedParams(int row) {
        System.out.println("amde it here");
        float f[] = new float[numParams];
        for (int i = 0; i < numParams; i++) {
            f[i] = (float)instances[i].instance(row).classValue();
        }
        return f;
    }

}

