/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * AllAccuracy.java
 *
 * Created on Dec 12, 2009, 11:37:25 PM
 */
package wekinator;

import java.awt.Dimension;
import java.util.logging.Level;
import java.util.logging.Logger;
import wekinator.LearningAlgorithms.NNLearningAlgorithm;

/**
 *
 * @author rebecca
 */
public class AllAccuracy extends javax.swing.JPanel {
    //Get informed of everything by parent?

    protected LearningSystem learningSystem = null;
    protected ParameterMiniViewer[] paramPanels = null;
    protected int myParam = -1;

    public void setLearningSystem(LearningSystem ls) {
        learningSystem = ls;
        panelOutputs.removeAll();
        if (myParam == -1) {


            int numParams = learningSystem.getNumParams();
            paramPanels = new ParameterMiniViewer[numParams];
            SimpleDataset d = learningSystem.getDataset();
            for (int i = 0; i < numParams; i++) {
                if (d != null) {
                    paramPanels[i] = new ParameterMiniViewer(d.getParameterName(i), 0.0);
                } else {
                    paramPanels[i] = new ParameterMiniViewer("Param" + i, 0.0);
                }
                paramPanels[i].setPreferredSize(new Dimension(300, 28));
                panelOutputs.add(paramPanels[i]);
            }
        } else {
            paramPanels = new ParameterMiniViewer[1];
            SimpleDataset d = learningSystem.getDataset();
            if (d != null) {
                paramPanels[0] = new ParameterMiniViewer(d.getParameterName(myParam), 0.0);
            } else {
                paramPanels[0] = new ParameterMiniViewer("Param" + myParam, 0.0);
            }
            paramPanels[0].setPreferredSize(new Dimension(300, 28));
            panelOutputs.add(paramPanels[0]);
        }
    }

    //Under assumption that panel is already enabled
    public void setEvaluationEnabled(boolean enable) {
        buttonCompute.setEnabled(enable);
    }

    public void updateResults(double[] results, boolean isCV) {
        if (results != null) {
            if (myParam == -1) {
                if (results.length == paramPanels.length) {
                    for (int i = 0; i < paramPanels.length; i++) {
                        String s;
                        if (learningSystem.getLearners(i) instanceof NNLearningAlgorithm) {
                            s = " (RMS error)";
                        } else {
                            s = " (% accurate)";
                        }
                        paramPanels[i].setValue(results[i] + s);
                    }
                }
            } else {
                if (results.length > myParam) {
                    String s;
                    if (learningSystem.getLearners(myParam) instanceof NNLearningAlgorithm) {
                        s = " (RMS error)";
                    } else {
                        s = " (% accurate)";
                    }
                    paramPanels[0].setValue(results[myParam] + s);
                }
            }

        }
        if (isCV) {
            labelResultsHeader.setText("CV accuracy computed:");
        } else {
            labelResultsHeader.setText("Training accuracy computed: ");
        }
    }

    public void evaluationFinished() {
        //TODO: Also need to re-enable eval button from elsewhere.
        setGuiEvaluating(false);
    }

    /** Creates new form AllAccuracy */
    public AllAccuracy() {
        initComponents();
        myParam = -1;
        setGuiEvaluating(false);
    }

    public AllAccuracy(int paramNum) {
        initComponents();
        myParam = paramNum;
        setGuiEvaluating(false);
    }

    public void setParamNum(int paramNum) {
        this.myParam = paramNum;

    }

    protected void setGuiEvaluating(boolean evaluating) {
        buttonCompute.setEnabled(evaluating);
        progressBar.setIndeterminate(evaluating);
        if (evaluating) {
            labelStatus.setText("Evaluating accuracy...");
        } else {
            labelStatus.setText("");
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        comboNumFolds = new javax.swing.JComboBox();
        buttonCompute = new javax.swing.JButton();
        radioCV = new javax.swing.JRadioButton();
        radioTraining = new javax.swing.JRadioButton();
        labelStatus = new javax.swing.JLabel();
        buttonCancel = new javax.swing.JButton();
        progressBar = new javax.swing.JProgressBar();
        labelResultsHeader = new javax.swing.JLabel();
        scrollOutputPanel = new javax.swing.JScrollPane();
        panelOutputs = new javax.swing.JPanel();
        parameterMiniViewer1 = new wekinator.ParameterMiniViewer();

        setBorder(javax.swing.BorderFactory.createTitledBorder("Compute Accuracy"));

        comboNumFolds.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "2 folds", "5 folds", "10 folds" }));

        buttonCompute.setText("Compute");
        buttonCompute.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonComputeActionPerformed(evt);
            }
        });

        buttonGroup1.add(radioCV);
        radioCV.setSelected(true);
        radioCV.setText("Cross-validation using ");

        buttonGroup1.add(radioTraining);
        radioTraining.setText("Training accuracy");

        labelStatus.setText("Computing Fold 2 of 10, model 1 of 15");

        buttonCancel.setText("Cancel");
        buttonCancel.setEnabled(false);
        buttonCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCancelActionPerformed(evt);
            }
        });

        progressBar.setIndeterminate(true);

        labelResultsHeader.setText("Accuracy computed:");

        scrollOutputPanel.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        panelOutputs.setLayout(new javax.swing.BoxLayout(panelOutputs, javax.swing.BoxLayout.Y_AXIS));
        panelOutputs.add(parameterMiniViewer1);

        scrollOutputPanel.setViewportView(panelOutputs);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(progressBar, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 303, Short.MAX_VALUE)
                .add(22, 22, 22))
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(labelResultsHeader, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 287, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(36, Short.MAX_VALUE))
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(layout.createSequentialGroup()
                        .addContainerGap()
                        .add(radioTraining)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 183, Short.MAX_VALUE))
                    .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
                        .addContainerGap()
                        .add(radioCV)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(comboNumFolds, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
                        .addContainerGap()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(labelStatus, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 323, Short.MAX_VALUE)
                            .add(layout.createSequentialGroup()
                                .add(buttonCompute)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(buttonCancel)))))
                .addContainerGap())
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .add(scrollOutputPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 303, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(radioCV)
                    .add(comboNumFolds, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(radioTraining)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(buttonCompute)
                    .add(buttonCancel))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(labelStatus, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 16, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(4, 4, 4)
                .add(progressBar, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(labelResultsHeader, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 16, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(scrollOutputPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 130, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(31, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void buttonComputeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonComputeActionPerformed
        //Determine setup
        if (radioCV.isSelected()) {
            int numFolds = 10;
            if (comboNumFolds.getSelectedIndex() == 0) {
                numFolds = 2;
            } else if (comboNumFolds.getSelectedIndex() == 1) {
                numFolds = 5;
            } else if (comboNumFolds.getSelectedIndex() == 2) {
                numFolds = 10;
            }
            try {
                if (myParam == -1) {
                    if (learningSystem == null) {
                        System.out.println("null");
                    }
                    learningSystem.computeCVAccuracyInBackground(numFolds);
                } else {
                    learningSystem.computeCVAccuracyInBackground(myParam, numFolds);
                }
                setGuiEvaluating(true);
            } catch (Exception ex) {
                Logger.getLogger(AllAccuracy.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            try {
                if (myParam == -1) {
                    learningSystem.computeTrainingAccuracyInBackground();
                } else {
                    learningSystem.computeTrainingAccuracyInBackground(myParam);
                }
                setGuiEvaluating(true);
            } catch (Exception ex) {
                Logger.getLogger(AllAccuracy.class.getName()).log(Level.SEVERE, null, ex);
            }
            setGuiEvaluating(true);
        }

}//GEN-LAST:event_buttonComputeActionPerformed

    private void buttonCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCancelActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_buttonCancelActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonCancel;
    private javax.swing.JButton buttonCompute;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox comboNumFolds;
    private javax.swing.JLabel labelResultsHeader;
    private javax.swing.JLabel labelStatus;
    private javax.swing.JPanel panelOutputs;
    private wekinator.ParameterMiniViewer parameterMiniViewer1;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JRadioButton radioCV;
    private javax.swing.JRadioButton radioTraining;
    private javax.swing.JScrollPane scrollOutputPanel;
    // End of variables declaration//GEN-END:variables
}
