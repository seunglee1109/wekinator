/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * BuildPanel.java
 *
 * Created on Dec 6, 2009, 9:53:26 PM
 */
package wekinator;

import wekinator.LearningSystem;
import java.awt.Color;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import wekinator.WekinatorLearningManager.Mode;

/**
 *
 * @author rebecca
 */
public class BuildPanel extends javax.swing.JPanel {

    int numParams = 0;
    ParameterMiniPanel[] paramPanels = null;
    SimpleDataset dataset = null;
    boolean isRecording = false;
    LearningSystem learningSystem = null;
    ChangeListener datasetChangeListener = new ChangeListener() {

        public void stateChanged(ChangeEvent e) {
            datasetChanged(e);
        }
    };
    ChangeListener paramsChangeListener = new ChangeListener() {

        public void stateChanged(ChangeEvent e) {
            paramsChanged(e);
        }
    };

    

    /** Creates new form BuildPanel */
    public BuildPanel() {
        initComponents();
        WekinatorLearningManager.getInstance().addPropertyChangeListener(new PropertyChangeListener() {

            public void propertyChange(PropertyChangeEvent evt) {
                learningManagerChange(evt);
            }
        });
    }

    void setLearningSystem(LearningSystem ls) {
        if (learningSystem == ls) {
            return;
        }

        if (learningSystem != null) { //remove prior listeners
            if (paramPanels != null) {
                for (int i = 0; i < paramPanels.length; i++) {
                    paramPanels[i].removeChangeListener(paramsChangeListener);
                }
            }
            if (dataset != null) {
                dataset.removeChangeListener(datasetChangeListener);
            }
        }


        //Configure params pane
        if (ls == null) {
            return;
        }

        this.learningSystem = ls;
        numParams = ls.getNumParams();
        panelBuildParams.removeAll();
        paramPanels = new ParameterMiniPanel[numParams];

        dataset = ls.getDataset();
        if (dataset != null) {
            dataset.addChangeListener(datasetChangeListener);
        }

        for (int i = 0; i < numParams; i++) {
            paramPanels[i] = new ParameterMiniPanel(
                    dataset.getParameterName(i),
                    0.0,
                    dataset.maxLegalDiscreteParamValue(i),
                    dataset.isParameterDiscrete(i),
                    true);
            panelBuildParams.add(paramPanels[i]);
            paramPanels[i].addChangeListener(paramsChangeListener);
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        comboSynthAction = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        scrollTrainPanel = new javax.swing.JScrollPane();
        panelBuildParams = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        buttonRecord = new javax.swing.JButton();
        buttonAddClipboard = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        buttonAddClipboard1 = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        labelNumExamples = new javax.swing.JLabel();
        jButton8 = new javax.swing.JButton();
        buttonForget = new javax.swing.JButton();

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Set parameter values"));

        comboSynthAction.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "play these parameters", "send its parameters here", "play these parameters on demand", "do nothing" }));
        comboSynthAction.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboSynthActionActionPerformed(evt);
            }
        });

        jLabel1.setText("My synth should:");

        panelBuildParams.setLayout(new javax.swing.BoxLayout(panelBuildParams, javax.swing.BoxLayout.Y_AXIS));
        scrollTrainPanel.setViewportView(panelBuildParams);

        jButton1.setText("play");

        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .add(jLabel1)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(comboSynthAction, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jButton1)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .add(scrollTrainPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 474, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel2Layout.createSequentialGroup()
                .add(scrollTrainPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 182, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel1)
                    .add(comboSynthAction, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jButton1)))
        );

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder("Use these parameters"));

        buttonRecord.setText("Begin recording examples into dataset");
        buttonRecord.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonRecordActionPerformed(evt);
            }
        });

        buttonAddClipboard.setText("add to parameter clipboard");
        buttonAddClipboard.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAddClipboardActionPerformed(evt);
            }
        });

        jLabel2.setText("or");

        buttonAddClipboard1.setText("view clipboard");
        buttonAddClipboard1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAddClipboard1ActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel6Layout = new org.jdesktop.layout.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel2)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(buttonAddClipboard)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 83, Short.MAX_VALUE)
                .add(buttonAddClipboard1))
            .add(buttonRecord, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 474, Short.MAX_VALUE)
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel6Layout.createSequentialGroup()
                .add(buttonRecord, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 66, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(buttonAddClipboard)
                    .add(jLabel2)
                    .add(buttonAddClipboard1)))
        );

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder("Manage recorded examples"));

        labelNumExamples.setText("0 examples recorded");

        jButton8.setText("View examples");

        buttonForget.setText("Forget all examples");

        org.jdesktop.layout.GroupLayout jPanel7Layout = new org.jdesktop.layout.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel7Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(labelNumExamples)
                    .add(jButton8)
                    .add(buttonForget))
                .addContainerGap(287, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel7Layout.createSequentialGroup()
                .add(labelNumExamples)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jButton8)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(buttonForget))
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel6, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .add(jPanel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .add(jPanel7, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(jPanel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel6, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 134, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel7, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void comboSynthActionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboSynthActionActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_comboSynthActionActionPerformed

    private void buttonAddClipboardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAddClipboardActionPerformed
        if (learningSystem != null) {
            learningSystem.getScore().addParams(getParams(), 1.0);
        }
}//GEN-LAST:event_buttonAddClipboardActionPerformed

    private void buttonRecordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonRecordActionPerformed
        if (isRecording) {
            setRecording(false);
        } else {
            setRecording(true);
        }
    }//GEN-LAST:event_buttonRecordActionPerformed

    private void buttonAddClipboard1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAddClipboard1ActionPerformed
       if (learningSystem != null && learningSystem.getScore() != null) {
            learningSystem.getScore().view();
       }
    }//GEN-LAST:event_buttonAddClipboard1ActionPerformed

    private void setRecording(boolean set) {
        if (set) {
            WekinatorLearningManager.getInstance().startDatasetCreation();
            WekinatorLearningManager.getInstance().setParamsAndMask(getParams(), getMask());
        }

        setButtonRecording(set);
    }

    private double[] getParams() {
        double[] p = new double[numParams];
        for (int i = 0; i < paramPanels.length; i++) {
            p[i] = paramPanels[i].getVal();
        }
        return p;
    }

    private boolean[] getMask() {
        boolean[] m = new boolean[numParams];
        for (int i = 0; i < paramPanels.length; i++) {
            m[i] = paramPanels[i].getUse();
        }
        return m;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonAddClipboard;
    private javax.swing.JButton buttonAddClipboard1;
    private javax.swing.JButton buttonForget;
    private javax.swing.JButton buttonRecord;
    private javax.swing.JComboBox comboSynthAction;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton8;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JLabel labelNumExamples;
    private javax.swing.JPanel panelBuildParams;
    private javax.swing.JScrollPane scrollTrainPanel;
    // End of variables declaration//GEN-END:variables

    private void datasetChanged(ChangeEvent e) {
        int numData = dataset.getNumDatapoints();
        labelNumExamples.setText(numData + " examples recorded");
        buttonForget.setEnabled(numData != 0);
    }

    private void learningManagerChange(PropertyChangeEvent evt) {
        if (evt.getPropertyName().equals(WekinatorLearningManager.PROP_MODE)) {
            WekinatorLearningManager.Mode m = WekinatorLearningManager.getInstance().getMode();

            setButtonRecording(m == Mode.DATASET_CREATION);


        } else if (evt.getPropertyName().equals(WekinatorLearningManager.PROP_PARAMS)) {
            if (comboSynthAction.getSelectedIndex() == 1) {
            //Listen
           setParams(WekinatorLearningManager.getInstance().getParams());
           //Send out via osc
           //TODO
       }
        }
    }

    private void setButtonRecording(boolean y) {
        if (y) {
            buttonRecord.setText("Stop recording");
            buttonRecord.setBackground(Color.RED);
            isRecording = true;
        } else {
            buttonRecord.setText("Begin recording examples into dataset");
            isRecording = false;
        }
    }

    private void paramsChanged(ChangeEvent e) {
       if (comboSynthAction.getSelectedIndex() == 0) {
            //Listen
           double[] p = getParams();
           boolean[] b = getMask();
           //Send out via osc
           System.out.println("Sending params...");
       } 
    }

    private void setParams(double[] p) {
        for (int i= 0; i < paramPanels.length; i++) {
            paramPanels[i].setValue(p[i]);
        }
    }

     
}
