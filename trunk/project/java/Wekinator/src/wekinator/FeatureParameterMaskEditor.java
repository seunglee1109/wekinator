/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * FeatureParameterMaskEditor.java
 *
 * Created on Nov 18, 2009, 12:25:00 PM
 */
package wekinator;

import javax.swing.JFrame;
import javax.swing.table.AbstractTableModel;


/**
 *
 * @author rebecca
 */
public class FeatureParameterMaskEditor extends javax.swing.JPanel {

    FeatureParamModel model = null;
    boolean[][] original = null;

    /** Creates new form FeatureParameterMaskEditor */
    public FeatureParameterMaskEditor(FeatureToParameterMapping mapping) {
        initComponents();
        original = mapping.getFeatureToParameterMatrix();
        populateTable(mapping);
    }

    public FeatureParameterMaskEditor() {
        initComponents();
    }

    public void setMapping(FeatureToParameterMapping mapping) {
        populateTable(mapping);
        original = mapping.getFeatureToParameterMatrix();
    }

    public FeatureToParameterMapping getFeatureToParameterMapping() {
        if (model != null) {
            return model.mapping;
        }
        return null;
    }

    private void populateTable(FeatureToParameterMapping mapping) {
        model = new FeatureParamModel(mapping);
        table.setModel(model);
    //table = new JTable(model);
    // scrollPane.setViewportView(tab);

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        scrollPane = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        jButton2 = new javax.swing.JButton();

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        scrollPane.setViewportView(table);

        jButton2.setText("Reset");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .add(jButton2))
            .add(scrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 372, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .add(scrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 266, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jButton2))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        setFeaturesFromBackup();
    }//GEN-LAST:event_jButton2ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton2;
    private javax.swing.JScrollPane scrollPane;
    private javax.swing.JTable table;
    // End of variables declaration//GEN-END:variables

    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {


                // ChuckConfigurationForm panel = new ChuckConfigurationForm(c);

                // panel.setVisible(true);
                JFrame frame = new JFrame();
                FeatureManager fm = new FeatureManager();
                fm.useAudio = true;
                fm.useCentroid = true;
                fm.useRMS = true;
                fm.useFFT = true;
                fm.setFFTandWindowSize(100, 100);
                FeatureToParameterMapping fe = new FeatureToParameterMapping(fm, 3);


                FeatureParameterMaskEditor panel = new FeatureParameterMaskEditor(fe);

                frame.add(panel);
                frame.setVisible(true);
            }
        });
    }

    private void setAllFeaturesTrue() {
        model.setAllFeaturesTrue();
    }

    private void setFeaturesFromBackup() {
       model.mapping.setFromFeatureToParameterMatrix(original);
       model.fireTableDataChanged();

    }

    public boolean hasMappingChanged() {
        boolean mine[][] = model.mapping.getFeatureToParameterMatrix();
        for (int i = 0; i < original.length; i++) {
            for (int j = 0; j < original[0].length; j++) {
                if (mine[i][j] != original[i][j])
                    return true;
            }
        }
        return false;
    }
}
class FeatureParamModel extends AbstractTableModel {

    FeatureToParameterMapping mapping = null;
    private String[] columnNames;

    public FeatureParamModel(FeatureToParameterMapping m) {
        mapping = m;
        setColNames();
    }

    public int getRowCount() {
        return mapping.getNumFeatures();
    }

    public int getColumnCount() {
        return mapping.getNumParams() + 1;
    }

    public Class getColumnClass(int column) {
        try {
            if (column == 0) {
                return Class.forName("java.lang.String");
            }
            return Class.forName("java.lang.Boolean");
        } catch (ClassNotFoundException ex) {
            ex.printStackTrace();
            return null;
        }
    }

    protected void setColNames() {
        columnNames = new String[1 + mapping.numParams];
        columnNames[0] = "Feature";
        for (int i = 0; i < mapping.numParams; i++) {
            columnNames[i + 1] = "Param" + i;
        }
    }

    public Object getValueAt(int rowIndex, int columnIndex) {
        if (rowIndex >= 0 && rowIndex < mapping.getNumFeatures()) {
            if (columnIndex == 0) {
                return mapping.getFeatureName(rowIndex);
            } else if (columnIndex > 0 && columnIndex <= mapping.getNumParams()) {
                return mapping.getIsFeatureUsingParam(rowIndex, columnIndex - 1);
            }
        }
        return null;
    }

    public String getColumnName(int col) {
        return columnNames[col];
    }

    public boolean isCellEditable(int row, int col) {
        //Note that the data/cell address is constant,
        //no matter where the cell appears onscreen.
        if (col > 0) { //don't allow editing of ID
            return true;
        } else {
            return false;
        }
    }

    public void setValueAt(Object value, int row, int col) {
        if (col > 0) {
            boolean b = true;
            if (value instanceof Boolean) {
                mapping.setIsFeatureUsingParam(row, col - 1, (Boolean) value);
            }

            fireTableCellUpdated(row, col);
        }

    }

    void setAllFeaturesTrue() {
        mapping.setAllFeaturesTrue();
        fireTableDataChanged();
    }
}
